name: Add Pixel

on:
  issues:
    types:
      - opened

jobs:
  process_issue:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Validate issue title
        run: |
          if [[ ! ${{ github.event.issue.title }} =~ ^Color:\ #[0-9a-fA-F]{6}$ ]]; then
            echo "❌ The issue title does not start with 'Color: #' followed by a valid hex code."
            exit 1
          fi
          echo "The issue title is valid."

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install pillow

      - name: Count color issues
        id: color_issue_count
        run: |
          # Get the list of issues with 'color' label using GitHub API
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues?labels=color")
          
          # Count the number of issues returned
          count=$(echo "$response" | jq '. | length')
          echo "Color issues count: $count"
          
          # Set the count as an output variable
          echo "color_issues_count=$count" >> $GITHUB_ENV

      - name: Process tapestry image
        env:
          COLOR_ISSUES_COUNT: ${{ env.color_issues_count }}
        run: |
          python3 <<EOF
          import sys
          from PIL import Image
          import random

          # Parse hex color from issue title
          issue_title = "${{ github.event.issue.title }}"
          hex_color = issue_title.split("#")[-1]
          color = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

          # Load tapestry.png
          img_path = "tapestry.png"
          try:
              img = Image.open(img_path)
          except FileNotFoundError:
              print("❌ tapestry.png not found!")
              sys.exit(1)

          # Expand image if necessary
          width, height = img.size
          area = width * height
          color_issues_count = int("${{ env.COLOR_ISSUES_COUNT }}")
          if color_issues_count > current_pixels:
            # Expand image by adding one row or column
            new_width = width + 1 if width <= height else width
            new_height = height + 1 if height < width else height
            new_img = Image.new("RGBA", (new_width, new_height), (0, 0, 0, 0))
            new_img.paste(img, (0, 0))
            img = new_img
            img.save(img_path)
            print(f"Expanded tapestry to {new_width}x{new_height}")

          # Pick a random spot and paint the pixel
          x = random.randint(0, img.width - 1)
          y = random.randint(0, img.height - 1)
          img.putpixel((x, y), color)
          img.save(img_path)
          print(f"Added color {hex_color} at position ({x}, {y})")

          EOF

      - name: Commit updated tapestry
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add tapestry.png
          git commit -m "Update tapestry with new color from issue #${{ github.event.issue.number }}"
          git push

      - name: Add color tag to issue
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: color

      # If title is valid, then
        # 1. check that the number of issues with the color tag + 1 < area of tapestry.png (width^2), if so expand the area of tapestry.png to the next perfect square then proceed to the next step
        # 2. generate a random number between 1 and the area of tapestry.png
        # 3. take the hex colour in the title and create a pixel of that color at the corrseponding spot in the image
        # 4. Assign the 'color' tag to the issue
        # 5. Close issue
